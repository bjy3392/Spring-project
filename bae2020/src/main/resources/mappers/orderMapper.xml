<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.bae2020.dao.OrderDao">

	<insert id="insertCart">
		insert into cart value (default, #{vo.mid}, #{vo.product}, #{vo.option_unit}, #{vo.add_unit}, #{vo.meat_unit}, #{vo.price}, #{vo.price_add}, #{vo.price_meat}, default,#{vo.store} ,default, default);
	</insert>
	
	<select id="findCartByMid" resultType="com.spring.bae2020.vo.CartVo">
		select cart.*, prod.product_name, prod.image, prod.category_code
		  from cart cart
		 inner join product prod
		    on cart.product = prod.product_code  
		 where mid=#{mid}
		 order by cart_idx;
	</select>
	
	<update id="updateCart" >
		update cart set cnt = cnt +#{purpose} where mid=#{mid} and cart_idx = #{cart_idx};
	</update>
	
	<delete id="deleteCartByIdx">
		delete from cart where mid = #{mid}
		   and cart_idx in
		<foreach collection="arrayCartIdx" item="cart_idx" index="index" open="(" separator="," close=")">
       		#{cart_idx}
       	</foreach>  
	</delete>
	
	<select id="findCartByIdx" resultType="com.spring.bae2020.vo.ItemVo">
		select cart.*, prod.product_name, st.quantity
		  from cart cart
		 inner join product prod
		    on cart.product = prod.product_code
		  left outer join stock st
		    on substring_index(cart.option_unit,'/',1) = st.option_name
		   and st.subcategory_code = 'opt-001'  
		   and st.store=#{store_code}
		 where 1=1
		   and cart_idx in
		<foreach collection="arrayIdx" item="cart_idx" index="index" open="(" separator="," close=")">
       		#{cart_idx}
       	</foreach>  
		order by cart_idx;
	</select>
	
	<select id="findItemByOrderIdx"  resultType="com.spring.bae2020.vo.ItemVo">
		select item.* , prod.product_name, st.quantity
		  from item
		  inner join product prod
		    on item.product = prod.product_code
		  left outer join stock st
		    on substring_index(item.option_unit,'/',1) = st.option_name
		   and st.subcategory_code = 'opt-001'  
		   and st.store=#{store_code}
		 where 1=1
		   and item.order_idx in 
		   <foreach collection="arrayOrderIdx" item="order_idx" index="index" open="(" separator="," close=")">
	  	    	#{order_idx}
	  	   </foreach>   
	</select>
	
	
	<select id="findCartByProduct" resultType="com.spring.bae2020.vo.CartVo">
		select * from cart 
		where mid=#{vo.mid} 
		and product=#{vo.product} 
		and option_unit=#{vo.option_unit} 
		and add_unit=#{vo.add_unit}
		and meat_unit=#{vo.meat_unit};
	</select>
	
	<insert id="insertOrders" parameterType="com.spring.bae2020.vo.OrdersVo" useGeneratedKeys="true" keyProperty="vo.order_idx" keyColumn="order_idx">
		insert into orders value (default, #{vo.mid}, #{vo.total}, #{vo.payment}, #{vo.postcode}, #{vo.roadAddress}, #{vo.detailAddress}, #{vo.tel}, #{vo.demand}, #{vo.store}, #{vo.cancel},#{vo.delivery},#{vo.distance}, #{vo.point}, default, default, default);	
	</insert>
	
	<insert id="insertItemFromCart">
		insert into item (order_idx , mid,product, option_unit, add_unit, meat_unit, price, price_add,price_meat, cnt, create_dt )
			(select #{order_idx} as order_idx,mid, product, option_unit, add_unit, meat_unit, price, price_add,price_meat, cnt, now() 
		  	from cart 
		  	where cart_idx in 
		  	<foreach collection="arrayIdx" item="cart_idx" index="index" open="(" separator="," close=")">
       			#{cart_idx}
       	  	</foreach> )
       	 <!-- 이렇게 한번에 여러값을 insert 할 경우 auto_increment가 값을 건너뛰고 들어갈수도 있다. --> 	
	</insert>
	
	<insert id="insertItemFromItem">
		insert into item (order_idx , mid,product, option_unit, add_unit, meat_unit, price, price_add,price_meat, cnt, create_dt )
			(select #{order_idx} as order_idx,mid, product, option_unit, add_unit, meat_unit, price, price_add,price_meat, cnt, now() 
		  	   from item 
		  	  where order_idx =  #{reorder_idx} )
       	 <!-- 이렇게 한번에 여러값을 insert 할 경우 auto_increment가 값을 건너뛰고 들어갈수도 있다. --> 	
	</insert>
	
	<insert id="insertItem">
		insert into item values (default,#{order_idx}, #{itemVo.mid}, #{itemVo.product}, #{itemVo.option_unit}, #{itemVo.add_unit}, #{itemVo.meat_unit}, #{itemVo.price}, #{itemVo.price_add}, #{itemVo.price_meat}, #{itemVo.cnt},default);
	</insert>
	
	<select id="findOrdersGroupByIdx"  resultType="com.spring.bae2020.vo.OrdersVo">
		select orders.*, state.state_name, prod.product_name , store.store_name, count(*) as cnt
		  from item
		 inner join orders 
		    on item.order_idx = orders.order_idx
		   and orders.${group} = #{mid} 
		   <if test="delimiter == 'not'">
		   and orders.state != #{state} 
		   </if>
		   <if test="delimiter == 'only'">
		   and orders.state = #{state} 
		   </if> 
		   and date(orders.create_dt) = date(now())
		 inner join product prod
		    on item.product = prod.product_code
		 inner join state
			on orders.state = state.state_code
		 inner join store
		    on orders.store = store.store_code
		 where 1=1
		 group by item.order_idx;
	</select>
	

	<!-- <delete id="deleteOrderByIdx">
		delete from orders where mid=#{mid} and order_idx=#{order_idx};	
	</delete>
	
	<delete id="deleteItemByIdx">
		delete from item where order_idx=#{order_idx};	
	</delete> -->

	<delete id="deleteCartByMid">
		delete from cart where mid = #{mid}
	</delete>
	
	<select id="findOrderEndByMid" resultType="com.spring.bae2020.vo.OrdersVo">
		select orders.order_idx, orders.total, orders.store, orders.update_dt, store.store_name, prod.product_name, item.cnt
	  	  from orders
	  	 inner join (select product, count(*) as cnt, order_idx 
	  	 			   from item 
	  	 			  where 1=1
	  	 			    and mid = #{mid} 
	  	 			    and date_sub(now(), interval #{month} month) <![CDATA[<]]> create_dt
	  	 			  group by order_idx) item
   		   on orders.order_idx = item.order_idx  
	  	 inner join store
	  	    on orders.store = store.store_code
	  	 inner join product prod
  		    on item.product = prod.product_code
	     where 1=1
	       and orders.mid = #{mid}
	       and orders.state in ('state-05','state-06')
	       and date_sub(now(), interval #{month} month) <![CDATA[<]]> orders.create_dt
	     order by orders.create_dt desc;
	</select>
	
	<select id="findOrderByIdx" resultType="com.spring.bae2020.vo.OrdersVo">
		select * from orders where order_idx=#{order_idx};
	</select>
	
	<select id="checkStockByName" resultType="String">
		select st.quantity as quantity
		  from stock st
		 inner join options opt
		    on st.option_code = opt.option_code
		   and opt.option_name=#{bread}
		 where st.store = #{store} 
	</select>
	
	<select id="findCartOptionByIdx" resultType="String">
		select option_unit from cart where cart_idx = #{idx};
	</select>
	
	<select id="findItemStockByOption" resultType="com.spring.bae2020.vo.StockVo">
		select item.order_idx, item.option_name, item.cnt, stock.quantity 
		  from (select order_idx, substring_index(item.option_unit,'/',1) as option_name, sum(item.cnt) as cnt
  		          from item 
  		         where 1=1
  		           and order_idx in 
			   <foreach collection="arrayOrderIdx" item="order_idx" index="index" open="(" separator="," close=")">
		  	    	#{order_idx}
		  	   </foreach> 
		  	       and substring_index(item.product,'-',1)='SAND'
		  	     group by option_name, item.order_idx) item
		  inner join stock 
		     on item.option_name = stock.option_name
		    and stock.store = #{store}
		 	and stock.subcategory_code = 'opt-001'
		  where stock.quantity != 0
		    and item.cnt > stock.quantity
	</select>
	
	<select id="findCartStockByOption" resultType="com.spring.bae2020.vo.StockVo">
	 	select cart.option_name, cart.cnt, stock.quantity 
		  from (select substring_index(cart.option_unit,'/',1) as option_name, sum(cart.cnt) as cnt 
  		          from cart 
  		         where 1=1
  		           and cart_idx in
					<foreach collection="arrayIdx" item="cart_idx" index="index" open="(" separator="," close=")">
			       		#{cart_idx}
			       	</foreach> 
			       and substring_index(cart.product,'-',1)='SAND'	
			     group by option_name )cart
		  inner join stock 
		     on cart.option_name = stock.option_name
		    and stock.store = #{store} 
		 	and stock.subcategory_code = 'opt-001'
		  where stock.quantity != 0
		    and cart.cnt > stock.quantity
	</select>
	
	<insert id="insertPoint" parameterType="com.spring.bae2020.vo.PointEventVo" useGeneratedKeys="true" keyProperty="voP.event_idx" keyColumn="event_idx">
		insert into point_event value (default, #{voP.mid}, #{voP.order_idx}, #{voP.way}, #{voP.amount}, now());
	</insert>
	
	<insert id="insertPointDetail" parameterType="com.spring.bae2020.vo.PointEventVo" useGeneratedKeys="true" keyProperty="voP.detail_idx" keyColumn="detail_idx">
		insert into point_detail value (default, #{voP.mid}, #{voP.way}, #{voP.amount},#{voP.save_detail_idx} , #{voP.event_idx}, now(), date(date_add(now(), interval 7 day)));
	</insert>
	
	<update id="updatePointDetail">
		update point_detail set save_detail_idx = #{voP.detail_idx} where detail_idx=#{voP.detail_idx};
	</update>
	
	<select id="findPointByMid" resultType="String">
		select sum(amount) as amount
		  from point_event
		 where mid = #{mid} 
		 group by mid
	</select>
	
	<insert id="insertMinusPoint" parameterType="com.spring.bae2020.vo.PointEventVo" useGeneratedKeys="true" keyProperty="voP.event_idx" keyColumn="event_idx">
		insert into point_event (event_idx, mid, order_idx, way, amount, event_dt) 
		value (default, #{voP.mid}, #{voP.order_idx}, #{voP.way}, #{voP.amount}, now());
	</insert>
	
	<insert id="insertMinusPointDetail" parameterType="com.spring.bae2020.vo.PointEventVo" useGeneratedKeys="true" keyProperty="voP.detail_idx" keyColumn="detail_idx">
		insert into point_detail value (default, #{voP.mid}, #{voP.way}, #{voP.amount},#{voP.save_detail_idx} , #{voP.event_idx}, now(), #{voP.expiry_dt});
	</insert>
	
	<select id="findPointGroupBySaveIdx" resultType="com.spring.bae2020.vo.PointEventVo">
		select * 
		from (select sum(amount) as amount, save_detail_idx,  expiry_dt
		  		from point_detail
		 		where mid=#{mid}
		 		group by save_detail_idx
		 		order by event_dt) point_detail
		where amount != 0
	</select>
	
	<select id="findSumPointByExpiry" resultType="String">
		select sum(amount) 
		from (select sum(amount) as amount, save_detail_idx ,  expiry_dt
		  		from point_detail
		 		where mid=#{mid}
		 		group by save_detail_idx
		 		order by event_dt) point_detail
		where amount != 0
		  and expiry_dt <![CDATA[<]]> date(now())
	</select>
	
	<select id="findPointByExpiry" resultType="com.spring.bae2020.vo.PointEventVo">
		select * 
		from (select sum(amount) as amount, save_detail_idx as save_detail_idx, expiry_dt as expiry_dt
		  		from point_detail
		 		where mid=#{mid}
		 		group by save_detail_idx
		 		order by event_dt) point_detail
		where amount != 0
		  and expiry_dt <![CDATA[<]]> date(now())
	</select>
	
	<!-- <resultMap type="map" id="selectMapList"> 
		<result column="amount" property="amount"/> 
		<result column="save_detail_idx" property="save_detail_idx"/>
		<result column="expiry_dt" property="expiry_dt"/> 
	</resultMap> -->
	
	<select id="findPointByMonth" resultType="com.spring.bae2020.vo.PointEventVo">
		select * 
		  from point_event 
		 where 1=1
		   and mid = #{mid}
		   and date_sub(now(), interval #{month} month) <![CDATA[<]]> event_dt
		 order by event_dt desc;
	</select>
	
	<select id="findPointDetailByExpiry" resultType="com.spring.bae2020.vo.PointEventVo">
		select sum(amount)  as amount,  expiry_dt
		  from (select sum(amount)  as amount, save_detail_idx, expiry_dt
				  		from point_detail
				 		where mid=#{mid}
				 		group by save_detail_idx
				 		order by event_dt) point_detail
		 where amount != 0
		   and expiry_dt <![CDATA[>=]]> date(now())
		 group by expiry_dt
		 limit 1
	</select>
	
	<select id="findPointDetailByOrderIdx" resultType="com.spring.bae2020.vo.PointEventVo">
		 select pd.amount, pd.save_detail_idx as save_detail_idx, pd.expiry_dt
		   from point_detail pd
		  inner join point_event pe
		     on pe.event_idx = pd.original_idx
		    and pe.order_idx=#{order_idx}
	</select>
	
	
</mapper>


 

 








